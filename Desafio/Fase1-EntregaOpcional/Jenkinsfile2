pipeline {
    agent any
    parameters {
        string(name: 'TAG_KEY', defaultValue: 'Environment', description: 'Clave de la etiqueta para filtrar instancias EC2')
        choice(name: 'TAG_VALUE', choices: ['DAI', 'ONETEAM'], description: 'Valor de la etiqueta para filtrar instancias EC2')
        string(name: 'S3_BUCKET', defaultValue: 'tu-bucket-de-s3', description: 'Nombre del bucket de S3')
    }
    environment {
        AWS_DEFAULT_REGION = "us-east-1" // Ajusta según sea necesario
        PYTHON_SCRIPT_PATH = './Desafio/Fase1-EntregaOpcional/script.py' // Ruta del script Python
    }
    stages {
        stage('Install Dependencies') {
            steps {
                script {
                    // Instalar boto3 en el entorno de Jenkins
                    sh 'pip3 install boto3'
                }
            }
        }
        stage('Run Python Script') {
            steps {
                withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'UserJenkins-AWS', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    script {
                        def tagKey = params.TAG_KEY
                        def tagValue = params.TAG_VALUE
                        def s3Bucket = params.S3_BUCKET

                        // Capturar los nombres de los archivos comprimidos desde la salida del script Python
                        def compressedLogs = sh(
                            script: """
                            #!/bin/bash
                            TAG_KEY=${tagKey}
                            TAG_VALUE=${tagValue}
                            S3_BUCKET=${s3Bucket}

                            # Ejecutar el script Python y capturar los nombres de los archivos comprimidos
                            python3 ${env.PYTHON_SCRIPT_PATH} --tag-key \$TAG_KEY --tag-value \$TAG_VALUE --s3-bucket \$S3_BUCKET --region ${env.AWS_DEFAULT_REGION}
                            """,
                            returnStdout: true
                        ).trim().split("\n") // Dividir la salida por líneas, para manejar múltiples nombres

                        // Guardar los nombres de los archivos comprimidos para las siguientes etapas
                        env.COMPRESSED_LOGS = compressedLogs.join(",")
                    }
                }
            }
        }
        stage('Download from S3 and Send Email') {
            steps {
                withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'AWS-Jenkins', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    script {
                        def compressedLogs = env.COMPRESSED_LOGS.split(",")
                        def s3Bucket = params.S3_BUCKET
                        def tagValue = params.TAG_VALUE

                        // Descargar cada archivo desde S3 al workspace de Jenkins
                        compressedLogs.each { logFile ->
                            sh """
                            aws s3 cp s3://${s3Bucket}/${logFile} ${env.WORKSPACE}/
                            """
                        }

                        // Construir el patrón de adjuntos basado en los archivos descargados
                        def attachmentPattern = compressedLogs.collect { logFile ->
                            return "${env.WORKSPACE}/${logFile}"
                        }.join(",")
                        
                        echo "Archivos a adjuntar: ${attachmentPattern}"
                        
                        // Verificar si los archivos están en el directorio de trabajo
                        def downloadedFiles = sh(
                            script: "ls ${attachmentPattern}",
                            returnStdout: true
                        ).trim()

                        if (downloadedFiles) {
                            // Enviar un correo electrónico con los archivos descargados como adjuntos
                            emailext (
                                to: "matiasrv96@gmail.com",
                                subject: "Logs de instancias ${tagValue} - Job #${env.BUILD_NUMBER}",
                                body: "Adjunto se encuentran los logs comprimidos de las instancias EC2.",
                                attachmentsPattern: attachmentPattern,
                                mimeType: 'text/plain'
                            )

                            // Eliminar los archivos descargados
                            sh """
                            rm -f ${attachmentPattern}
                            """
                        } else {
                            error("No se encontraron archivos descargados para adjuntar.")
                        }
                    }
                }
            }
        }
    }
}
