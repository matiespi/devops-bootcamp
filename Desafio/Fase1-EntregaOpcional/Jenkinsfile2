pipeline {
    agent any
    parameters {
        string(name: 'TAG_KEY', defaultValue: 'Environment', description: 'Clave de la etiqueta para filtrar instancias EC2')
        choice(name: 'TAG_VALUE', choices: ['DAI', 'ONETEAM'], description: 'Valor de la etiqueta para filtrar instancias EC2')
        string(name: 'S3_BUCKET', defaultValue: 'tu-bucket-de-s3', description: 'Nombre del bucket de S3')
    }
    environment {
        AWS_DEFAULT_REGION = "us-east-1" // Ajusta seg√∫n sea necesario
        PYTHON_SCRIPT_PATH = './Desafio/Fase1-EntregaOpcional/script.py' // Ruta del script Python
    }
    stages {
        stage('Install Dependencies') {
            steps {
                script {
                    // Instalar boto3 en el entorno de Jenkins
                    sh 'pip3 install boto3'
                }
            }
        }
        stage('Run Python Script') {
            steps {
                withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'AWS-Jenkins', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    script {
                        def tagKey = params.TAG_KEY
                        def tagValue = params.TAG_VALUE
                        def s3Bucket = params.S3_BUCKET
                        
                        sh """
                        #!/bin/bash
                        TAG_KEY=${tagKey}
                        TAG_VALUE=${tagValue}
                        S3_BUCKET=${s3Bucket}
                        
                        # Ejecutar el script Python
                        python3 ${env.PYTHON_SCRIPT_PATH} --tag-key \$TAG_KEY --tag-value \$TAG_VALUE --s3-bucket \$S3_BUCKET --region ${env.AWS_DEFAULT_REGION}
                        """
                    }
                }
            }
        }
        stage('Download from S3 and Send Email') {
            steps {
                withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'AWS-Jenkins', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    script {
                        def tagValue = params.TAG_VALUE // Redefinir dentro del script block
                        def s3Bucket = params.S3_BUCKET
                        
                        // Define the pattern for compressed log files based on the TAG_VALUE
                        def compressedLogPattern = "logs_${tagValue}_*.zip"

                        // Download the files matching the pattern from S3 to the Jenkins workspace
                        sh """
                        aws s3 cp s3://${s3Bucket}/ . --recursive --exclude "*" --include "${compressedLogPattern}"
                        """

                        // Find the downloaded zip files in the workspace
                        def files = findFiles(glob: compressedLogPattern)
                        def attachments = files.collect { it.path }.join(',')

                        // Send email with the downloaded files attached
                        emailext (
                            to: "matiasrv96@gmail.com",
                            subject: "Logs de ${tagValue} - Job #${env.BUILD_NUMBER}",
                            body: "Adjunto se encuentran los logs comprimidos de la(s) instancia(s) EC2 etiquetada(s) como ${tagValue}.",
                            attachmentsPattern: attachments,
                            mimeType: 'text/plain'
                        )
                    }
                }
            }
        }
    }
}
